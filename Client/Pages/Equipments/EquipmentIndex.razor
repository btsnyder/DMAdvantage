@page "/equipments"
@attribute [Authorize]
@inject IApiService ApiService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

@if (_loading)
{
    <LightsaberLoad />
}
else
{
    <MudTable Items="@_equipments" Breakpoint="Breakpoint.Sm" Loading="@_loading" LoadingProgressColor="Color.Info"
        Dense="true" Striped="true" Filter="new Func<Equipment,bool>(SearchEquipments)">
        <ToolBarContent>
            <MudText Class="fw-bold" Typo="Typo.h3">Equipments</MudText>
            <MudFab Class="ml-3" StartIcon="@Icons.Filled.Add" Color="Color.Success" OnClick="@(() => NavigationManager.NavigateTo("equipments/add"))"/>
            <MudSpacer />
            <MudTextField @bind-Value="search" Placeholder="Search" Adornment="Adornment.Start" Immediate=true AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"/>
        </ToolBarContent>
        <ColGroup>
            <col />
            <col style="width: 150px;"/>
        </ColGroup>
        <HeaderContent>
            <MudTh Class="mud-theme-tertiary text-white">Name</MudTh>
            <MudTh Class="mud-theme-tertiary text-white"/>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@context.ToString()</MudTd>
            <MudTd>
                <div class="d-flex justify-content-end">
                    <MudIconButton Icon="@Icons.Filled.Edit" OnClick="() => EditEquipment(context.Id)" Variant="Variant.Filled" Color="Color.Primary" Class="mx-1"/>
                    <MudIconButton Icon="@Icons.Filled.ContentCopy" OnClick="() => CopyEquipment(context)" Variant="Variant.Filled" Color="Color.Tertiary" Class="mx-1"/>
                    <MudIconButton Icon="@Icons.Filled.Delete" OnClick="() => RemoveEquipment(context)" Variant="Variant.Filled" Color="Color.Error" Class="mx-1"/>
                </div>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager/>
        </PagerContent>
    </MudTable>
}

@code {
    private bool _loading = true; 
    private string search;
    private List<Equipment>? _equipments;

    protected override async Task OnInitializedAsync()
    {
        await RefreshEquipments();
        await base.OnInitializedAsync();
    }

    private async Task RemoveEquipment(Equipment equipment)
    {
        if (_equipments == null)
            return;
        _equipments.Remove(equipment);
        await ApiService.RemoveEntity<Equipment>(equipment.Id);
    }

    private async Task RefreshEquipments()
    {
        _equipments = await ApiService.GetAllEntities<Equipment>();
        _loading = false;   
    }

    private void EditEquipment(Guid id)
    {
        NavigationManager.NavigateTo($"equipments/edit/{id}");   
    }

    private async Task CopyEquipment(Equipment equipment)
    {
        try
        {
            equipment.Id = Guid.Empty;
            await ApiService.AddEntity(equipment);
            await RefreshEquipments();
            Snackbar.Add("Equipment copied successfully", Severity.Success);
        }
        catch
        {
            Snackbar.Add("Error copying property!", Severity.Error);
        }
    }

    private bool SearchEquipments(Equipment equipment)
    {
        if (string.IsNullOrWhiteSpace(search))
            return true;
        if (equipment.Name.Contains(search, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
}