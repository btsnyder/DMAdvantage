@page "/forcepowers"
@attribute [Authorize]

<div class="d-flex align-items-center mb-5">
    <MudText Class="fw-bold" Typo="Typo.h3">Force Powers</MudText> 
    <MudFab Class="ml-3" StartIcon="@Icons.Filled.Add" Color="Color.Success" OnClick="@(() => NavigationManager.NavigateTo("forcepowers/add"))"/>
</div>
<MudForm Model="@this">
    <MudGrid Class="mb-4">
        <MudItem xs="2">
            <MudTextField T="string" Label="Search" Value="@_searching.Search" ValueChanged="args => SearchChanged(args, nameof(_searching.Search))" Variant="Variant.Outlined"/>
        </MudItem>
        <MudItem xs="2">
            <MudSelect T="int" Label="Levels" MultiSelection="true" SelectedValues="_searching.Levels" SelectedValuesChanged="args => SearchChanged(args, nameof(_searching.Levels))"
                Variant="Variant.Outlined">
                @for (var lvl = 0; lvl < 10; lvl++)
                {
                    <MudSelectItem T="int" Value="@lvl"/>
                }
            </MudSelect>
        </MudItem>
        <MudItem xs="2">
            <MudSelect T="string" Label="Alignments" MultiSelection="true" SelectedValues="_searching.Alignments.Select(x => x.GetStringValue())" 
                SelectedValuesChanged="args => SearchChanged(args, nameof(_searching.Alignments))" Variant="Variant.Outlined">
                @foreach (var alignment in Enum.GetValues<ForceAlignment>())
                {
                    <MudSelectItem T="string" Value="@alignment.GetStringValue()">@alignment.GetStringValue()</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
        <MudItem xs="2">
            <MudSelect T="string" Label="Casting Period" MultiSelection="true" SelectedValues="_searching.CastingPeriods.Select(x => x.GetStringValue())" 
                SelectedValuesChanged="args => SearchChanged(args, nameof(_searching.CastingPeriods))" Variant="Variant.Outlined">
                @foreach (var castingPeriod in Enum.GetValues<CastingPeriod>())
                {
                    <MudSelectItem T="string" Value="@castingPeriod.GetStringValue()">@castingPeriod.GetStringValue()</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
        <MudItem xs="2">
            <MudSelect T="string" Label="Range" MultiSelection="true" SelectedValues="_searching.Ranges.Select(x => x.GetStringValue())" 
                       SelectedValuesChanged="args => SearchChanged(args, nameof(_searching.Ranges))" Variant="Variant.Outlined">
                @foreach (var powerRange in Enum.GetValues<PowerRange>())
                {
                    <MudSelectItem T="string" Value="@powerRange.GetStringValue()">@powerRange.GetStringValue()</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
    </MudGrid>
</MudForm>
 <MudTable Items="@_forcePowers" Breakpoint="Breakpoint.Sm" Loading="@_loading" LoadingProgressColor="Color.Info"
          Outlined="true" Dense="true" Striped="true" Class="mb-2">
    <ColGroup>
        <col />
        <col />
        <col />
        <col />
        <col />
        <col style="width: 150px;"/>
    </ColGroup>
    <HeaderContent>
        <MudTh Class="bg-dark text-white">Level</MudTh>
        <MudTh Class="bg-dark text-white">Name</MudTh>
        <MudTh Class="bg-dark text-white">Alignment</MudTh>
        <MudTh Class="bg-dark text-white">Period</MudTh>
        <MudTh Class="bg-dark text-white">Range</MudTh>
        <MudTh Class="bg-dark text-white"/>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Level">@context.Level</MudTd>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Alignment">@context.Alignment.GetStringValue()</MudTd>
        <MudTd DataLabel="Period">@context.CastingPeriod.GetStringValue()</MudTd>
        <MudTd DataLabel="Range">@context.Range.GetStringValue()</MudTd>
        <MudTd Class="d-flex justify-content-end">
            <MudIconButton Icon="@Icons.Filled.Edit" OnClick="@(() => NavigationManager.NavigateTo($"forcepowers/edit/{context.Id}"))" Variant="Variant.Filled" Color="Color.Primary" Class="mx-1"/>
            <MudIconButton Icon="@Icons.Filled.Delete" OnClick="() => RemoveForcePower(context)" Variant="Variant.Filled" Color="Color.Error" Class="mx-1"/>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager/>
    </PagerContent>
</MudTable> 
