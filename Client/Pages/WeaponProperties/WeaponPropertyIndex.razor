@page "/weaponproperties"
@attribute [Authorize]
@inject IApiService ApiService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<div Class="d-flex align-items-center mb-5">
    <MudText Class="fw-bold" Typo="Typo.h3">Weapon Properties</MudText> 
    <MudFab Class="ml-3" StartIcon="@Icons.Filled.Add" Color="Color.Success" OnClick="@(() => NavigationManager.NavigateTo("weaponproperties/add"))"/>
</div>
@if (_loading)
{
    <LightsaberLoad />
}
else
{
    <MudTable Items="@_weaponProperties" Breakpoint="Breakpoint.Sm" Loading="@_loading" LoadingProgressColor="Color.Info"
        Outlined="true" Dense="true" Striped="true">
        <ColGroup>
            <col />
            <col style="width: 150px;"/>
        </ColGroup>
        <HeaderContent>
            <MudTh Class="mud-theme-tertiary text-white">Name</MudTh>
            <MudTh Class="mud-theme-tertiary text-white"/>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@context.ToString()</MudTd>
            <MudTd>
                <div class="d-flex justify-content-end">
                    <MudIconButton Icon="@Icons.Filled.Edit" OnClick="() => EditProperty(context.Id)" Variant="Variant.Filled" Color="Color.Primary" Class="mx-1"/>
                    <MudIconButton Icon="@Icons.Filled.ContentCopy" OnClick="() => CopyProperty(context)" Variant="Variant.Filled" Color="Color.Tertiary" Class="mx-1"/>
                    <MudIconButton Icon="@Icons.Filled.Delete" OnClick="() => RemoveProperty(context)" Variant="Variant.Filled" Color="Color.Error" Class="mx-1"/>
                </div>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager/>
        </PagerContent>
    </MudTable>
}

@code {
    private bool _loading = true; 
    private List<WeaponProperty>? _weaponProperties;

    protected override async Task OnInitializedAsync()
    {
        await RefreshProperties();
        await base.OnInitializedAsync();
    }

    private async Task RemoveProperty(WeaponProperty weaponProperty)
    {
        if (_weaponProperties == null)
            return;
        _weaponProperties.Remove(weaponProperty);
        await ApiService.RemoveEntity<WeaponProperty>(weaponProperty.Id);
    }

    private async Task RefreshProperties()
    {
        _weaponProperties = await ApiService.GetAllEntities<WeaponProperty>();
        _loading = false;   
    }

    private void EditProperty(Guid id)
    {
        NavigationManager.NavigateTo($"weaponproperties/edit/{id}");   
    }

    private async Task CopyProperty(WeaponProperty weaponProperty)
    {
        try
        {
            weaponProperty.Id = Guid.Empty;
            await ApiService.AddEntity(weaponProperty);
            await RefreshProperties();
            Snackbar.Add("Weapon Property copied successfully", Severity.Success);
        }
        catch
        {
            Snackbar.Add("Error copying property!", Severity.Error);
        }
    }
}