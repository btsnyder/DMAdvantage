@page "/account/login"
@inject IAccountService AccountService
@inject NavigationManager NavigationManager

<EditForm Model="@_model" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator/>
    <MudGrid Class="justify-center">
        <MudItem xs="12" sm="4">
            <MudCard Outlined="true">
                <MudCardContent>
                    <MudText Class="fw-bold" Typo="Typo.h5">Login</MudText>
                    <MudTextField @bind-Value="_model.Username" For="@(() => _model.Username)" Label="Username"/>
                    <MudTextField @bind-Value="_model.Password" InputType="InputType.Password" 
                        For="@(() => _model.Password)" Label="Password"/>
                </MudCardContent>
                <MudCardActions>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" ButtonType="ButtonType.Submit" Disabled="_loading">
                        @if (_loading)
                        {
                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                            <MudText Class="ms-2">Processing</MudText>
                        }
                        else
                        {
                            <MudText>Login</MudText>
                        }
                    </MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>
</EditForm>

@code {
    private readonly LoginRequest _model = new();
    
    private bool _loading;

    [Inject] ISnackbar Snackbar { get; set; }

    private async Task OnValidSubmit()
    {
        _loading = true;
        try
        {
            await AccountService.Login(_model);
            NavigationManager.NavigateTo("/");
        }
        catch (Exception)
        {
            Snackbar.Add("Failed to login! Check credentials.", Severity.Error);
            StateHasChanged();
        }
        _loading = false;
    }
}