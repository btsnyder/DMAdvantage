@page "/encounters"
@attribute [Authorize]
@inject IApiService ApiService
@inject NavigationManager NavigationManager

<div class="d-flex align-items-center mb-5">
    <MudText Class="fw-bold" Typo="Typo.h3">Encounters</MudText> 
    <MudFab Class="ml-3" StartIcon="@Icons.Filled.Add" Color="Color.Success" OnClick="@(() => NavigationManager.NavigateTo("encounters/add"))"/>
</div>
@if (!loading)
{
    <MudTable Items="@encounters" Breakpoint="Breakpoint.Sm" Loading="@loading" LoadingProgressColor="Color.Info"
              Outlined="true" Dense="true" Striped="true">
        <ColGroup>
            <col />
            <col />
            <col style="width: 150px;"/>
        </ColGroup>
        <HeaderContent>
            <MudTh Class="mud-theme-tertiary text-white">Name</MudTh>
            <MudTh Class="mud-theme-tertiary text-white">Id</MudTh>
            <MudTh Class="mud-theme-tertiary text-white"/>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Name">@context.Id</MudTd>
            <MudTd Class="d-flex justify-content-end">
                <MudIconButton Icon="@Icons.Filled.RemoveRedEye" OnClick="@(() => NavigationManager.NavigateTo($"encounters/view/{context.Id}"))" Variant="Variant.Filled" Color="Color.Secondary" Class="mx-1"/>
                <MudIconButton Icon="@Icons.Filled.Edit" OnClick="@(() => NavigationManager.NavigateTo($"encounters/edit/{context.Id}"))" Variant="Variant.Filled" Color="Color.Primary" Class="mx-1"/>
                <MudIconButton Icon="@Icons.Filled.Delete" OnClick="() => RemoveEncounter(context)" Variant="Variant.Filled" Color="Color.Error" Class="mx-1"/>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager/>
        </PagerContent>
    </MudTable>
}
else
{
    <div class="d-flex justify-center">
        <MudProgressCircular Color="Color.Primary" Style="height:70px;width:70px;" Indeterminate="true" />
    </div>
}

@code {
    private bool loading;
    private List<EncounterResponse>? encounters;

    protected override async Task OnInitializedAsync()
    {
        await RefreshEncounters();   
    }

    private async Task RemoveEncounter(EncounterResponse encounter)
    {
        if (encounters == null) return;
        encounters.Remove(encounter);
        await ApiService.RemoveEntity<EncounterResponse>(encounter.Id);
    }

    private async Task RefreshEncounters()
    {
        loading = true;
        encounters = await ApiService.GetAllEntities<EncounterResponse>();
        loading = false;   
    }
}
