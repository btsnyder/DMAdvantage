@page "/creatures"
@attribute [Authorize]
@inject IApiService ApiService
@inject NavigationManager NavigationManager

<div Class="d-flex align-items-center mb-5">
    <MudText Class="fw-bold" Typo="Typo.h3">Creatures</MudText> 
    <MudFab Class="ml-3" StartIcon="@Icons.Filled.Add" Color="Color.Success" OnClick="@(() => NavigationManager.NavigateTo("creatures/add"))"/>
</div>
@if (!loading)
{
    <MudTable Items="@creatures" Breakpoint="Breakpoint.Sm" Loading="@loading" LoadingProgressColor="Color.Info"
              Outlined="true" Dense="true" Striped="true">
        <ColGroup>
            <col />
            <col />
            <col style="width: 150px;"/>
        </ColGroup>
        <HeaderContent>
            <MudTh Class="bg-dark text-white">Name</MudTh>
            <MudTh Class="bg-dark text-white">Challenge</MudTh>
            <MudTh Class="bg-dark text-white"/>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Player">@context.ChallengeRating</MudTd>
            <MudTd>
                <div class="d-flex justify-content-end">
                    <MudIconButton Icon="@Icons.Filled.Edit" OnClick="() => EditCreature(context.Id)" Variant="Variant.Filled" Color="Color.Primary" Class="mx-1"/>
                    <MudIconButton Icon="@Icons.Filled.Delete" OnClick="() => RemoveCharacter(context)" Variant="Variant.Filled" Color="Color.Error" Class="mx-1"/>
                </div>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager/>
        </PagerContent>
    </MudTable>
}
else
{
    <div class="d-flex justify-center">
        <MudProgressCircular Color="Color.Primary" Style="height:70px;width:70px;" Indeterminate="true" />
    </div>
}

@code {
    private bool loading;
    private List<CreatureResponse>? creatures;

    protected override async Task OnInitializedAsync()
    {
        await RefreshCreatures();   
    }

    private async Task RemoveCharacter(CreatureResponse creature)
    {
        if (creatures == null) return;
        creatures.Remove(creature);
        await ApiService.RemoveEntity<CreatureResponse>(creature.Id);
    }

    private async Task RefreshCreatures()
    {
        loading = true;
        creatures = await ApiService.GetAllEntities<CreatureResponse>();
        loading = false;   
    }

    private void EditCreature(Guid id)
    {
        NavigationManager.NavigateTo($"creatures/edit/{id}");   
    }
}