@page "/creatures"
@attribute [Authorize]
@inject IApiService ApiService
@inject NavigationManager NavigationManager

@if (!_loading)
{
    <MudTable Items="@_creatures" Breakpoint="Breakpoint.Sm" Loading="@_loading" LoadingProgressColor="Color.Info"
        Dense="true" Striped="true" Filter="new Func<Creature,bool>(SearchCreature)" Elevation="0">
        <ToolBarContent>
            <MudText Class="fw-bold" Typo="Typo.h3">Creatures</MudText>
            <MudFab Class="ml-3" StartIcon="@Icons.Filled.Add" Color="Color.Success" OnClick="@(() => NavigationManager.NavigateTo("creatures/add"))"/>
            <MudSpacer />
            <MudTextField @bind-Value="search" Placeholder="Search" Adornment="Adornment.Start" Immediate=true AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"/>
        </ToolBarContent>
        <ColGroup>
            <col />
            <col />
            <col style="width: 150px;"/>
        </ColGroup>
        <HeaderContent>
            <MudTh Class="mud-theme-tertiary text-white">Name</MudTh>
            <MudTh Class="mud-theme-tertiary text-white">Challenge</MudTh>
            <MudTh Class="mud-theme-tertiary text-white"/>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Player">@context.ChallengeRating</MudTd>
            <MudTd>
                <div class="d-flex justify-content-end">
                    <MudIconButton Icon="@Icons.Filled.Edit" OnClick="() => EditCreature(context.Id)" Variant="Variant.Filled" Color="Color.Primary" Class="mx-1"/>
                    <MudIconButton Icon="@Icons.Filled.Delete" OnClick="() => RemoveCharacter(context)" Variant="Variant.Filled" Color="Color.Error" Class="mx-1"/>
                </div>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager/>
        </PagerContent>
    </MudTable>
}
else
{
    <div class="d-flex justify-center">
        <MudProgressCircular Color="Color.Primary" Style="height:70px;width:70px;" Indeterminate="true" />
    </div>
}

@code {
    private bool _loading;
    private string search = "";
    private List<Creature>? _creatures;

    protected override async Task OnInitializedAsync()
    {
        await RefreshCreatures();   
    }

    private async Task RemoveCharacter(Creature creature)
    {
        if (_creatures == null) return;
        _creatures.Remove(creature);
        await ApiService.RemoveEntity<Creature>(creature.Id);
    }

    private async Task RefreshCreatures()
    {
        _loading = true;
        _creatures = await ApiService.GetAllEntities<Creature>();
        _loading = false;   
    }

    private void EditCreature(Guid id)
    {
        NavigationManager.NavigateTo($"creatures/edit/{id}");   
    }

    private bool SearchCreature(Creature creature)
    {
        if (string.IsNullOrWhiteSpace(search))
            return true;
        if (creature.Name.Contains(search, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
}