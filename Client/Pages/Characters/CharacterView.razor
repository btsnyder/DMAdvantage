@page "/characters/view/{PlayerName}"
@inject IDialogService DialogService

@if (_loading)
{
    <LightsaberLoad />
}
else if (_model != null)
{
    <MudGrid>
        <MudItem xs="12">
            <MudText Color="Color.Error" Typo="Typo.h5" Class="fw-bolder">@_model.Name</MudText>
        </MudItem>

        <MudItem xs="6">
            <MudText>Player: <b>@_model.PlayerName</b></MudText>
        </MudItem>
        <MudItem xs="6">
            <MudText>Class: <b>@_model.Class</b></MudText>
        </MudItem>

        <MudItem xs="3">
            <MudText>Lvl: <b>@_model.Level</b></MudText>
        </MudItem>
        <MudItem xs="3">
            <MudText>HP: <b>@_model.HitPoints</b></MudText>
        </MudItem>
        <MudItem xs="3">
            <MudText>AC: <b>@_model.ArmorClass</b></MudText>
        </MudItem>
        <MudItem xs="3">
            <MudText>Spd: <b>@_model.Speed</b></MudText>
        </MudItem>
    </MudGrid>
    <MudPaper Class="py-2 my-5" Elevation="3" Outlined="true">
        <div class="d-flex justify-content-around align-items-center">
            <div class="d-flex flex-column align-items-center">
                <MudText Class="fw-bold" Color="Color.Error" Typo="Typo.h6">STR</MudText>
                <MudText Class="fw-bold" Typo="Typo.h5">@_model.StrengthBonus.PrintInt()</MudText>
                <MudText Typo="Typo.caption">(@_model.Strength)</MudText>
            </div>
            <div class="d-flex flex-column align-items-center">
                <MudText Class="fw-bold" Color="Color.Error" Typo="Typo.h6">DEX</MudText>
                <MudText Class="fw-bold" Typo="Typo.h5">@_model.DexterityBonus.PrintInt()</MudText>
                <MudText Typo="Typo.caption">(@_model.Dexterity)</MudText>
            </div>
            <div class="d-flex flex-column align-items-center">
                <MudText Class="fw-bold" Color="Color.Error" Typo="Typo.h6">CON</MudText>
                <MudText Class="fw-bold" Typo="Typo.h5">@_model.ConstitutionBonus.PrintInt()</MudText>
                <MudText Typo="Typo.caption">(@_model.Constitution)</MudText>
            </div>
        </div>
        <div class="d-flex justify-content-around align-items-center my-2">
            <div class="d-flex flex-column align-items-center">
                <MudText Class="fw-bold" Color="Color.Error" Typo="Typo.h6">INT</MudText>
                <MudText Class="fw-bold" Typo="Typo.h5">@_model.IntelligenceBonus.PrintInt()</MudText>
                <MudText Typo="Typo.caption">(@_model.Intelligence)</MudText>
            </div>
            <div class="d-flex flex-column align-items-center">
                <MudText Class="fw-bold" Color="Color.Error" Typo="Typo.h6">WIS</MudText>
                <MudText Class="fw-bold" Typo="Typo.h5">@_model.WisdomBonus.PrintInt()</MudText>
                <MudText Typo="Typo.caption">(@_model.Wisdom)</MudText>
            </div>
            <div class="d-flex flex-column align-items-center">
                <MudText Class="fw-bold" Color="Color.Error" Typo="Typo.h6">CHA</MudText>
                <MudText Class="fw-bold" Typo="Typo.h5">@_model.CharismaBonus.PrintInt()</MudText>
                <MudText Typo="Typo.caption">(@_model.Charisma)</MudText>
            </div>
        </div>
    </MudPaper>
    <MudGrid>
        <MudItem xs="12">
            <MudText Class="fw-bold" Typo="Typo.h6">Weapons</MudText>
        </MudItem>
        <MudItem xs="6" Class="bg-danger border border-white">
            <MudText>Name</MudText>
        </MudItem>
        <MudItem xs="3" Class="bg-danger border border-white">
            <MudText>Hit</MudText>
        </MudItem>
        <MudItem xs="3" Class="bg-danger border border-white">
            <MudText>Dam</MudText>
        </MudItem>
        @foreach (var weapon in _model.Weapons)
        {
            <MudItem xs="6" Class="border-top border-start border-white">
                <MudText Typo="Typo.caption">@weapon.Name</MudText>
            </MudItem>
            <MudItem xs="3" Class="border-top border-white">
                <MudText Typo="Typo.caption">@_model.WeaponBonus(weapon.Melee).PrintInt()</MudText>
            </MudItem>
            <MudItem xs="3" Class="border-top border-end border-white">
                <MudText Typo="Typo.caption">@weapon.Damage@_model.WeaponBonus(weapon.Melee, true).PrintInt()</MudText>
            </MudItem>
            @if (weapon.Properties.Any())
            {
                <MudItem xs="12" Class="d-flex flex-wrap border border-top-0 border-white">
                    @foreach (var prop in weapon.Properties)
                    {
                        <MudButton Class="m-2" Variant="Variant.Outlined" Color="Color.Info" OnClick="@(() => ShowWeaponProperty(prop))" Size="Size.Small">
                            @prop
                        </MudButton>
                    }
                </MudItem>
            }
        }
    </MudGrid>
    <MudText Class="fw-bold mt-5" Typo="Typo.h6">Abilities</MudText>
    <MudContainer Class="d-flex flex-wrap p-0">
        @foreach (var ability in _model.Abilities.OrderBy(x => x.ToString()))
        {
            <MudButton Class="m-1 my-2" Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => ShowAbility(ability))" Size="Size.Medium">@ability.Name</MudButton>
        }
    </MudContainer>
    <MudText Class="fw-bold" Typo="Typo.h6">Skills</MudText>
    <MudContainer Class="d-flex p-0">
        <MudTextField T="string" @bind-Value="_skillSearch" Label="Skill Search" Variant="Variant.Outlined" TextChanged=@SkillSearch Immediate="true"/>
        <MudIconButton Icon="@Icons.Filled.Token" Color="Color.Primary" aria-label="roll" OnClick="ShowRoll"/>
    </MudContainer>
    @foreach (var skill in _filteredSkills)
    {
        <MudCard Class="d-flex justify-center mud-theme-primary p-2 m-1">
            <MudText>@($"{skill} {GetSkillBonus(skill)}")</MudText>
        </MudCard>
    }
    <MudText Class="fw-bold mt-5" Typo="Typo.h6">Force Powers</MudText>
    <div class="row mb-2 align-items-center">
        <div class="col"></div>
        <div class="col">
            <text>Modifier</text>
        </div>
        <div class="col">
            <text>Save DC</text>
        </div>
    </div>
    <div class="row mb-2 align-items-center justify-center">
        <div class="col">
            <text>Light</text>
        </div>
        <div class="col">
            <text style="font-size: large"><b>@_model.PowerAttackModifier(ForceAlignment.Light).PrintInt()</b></text>
        </div>
        <div class="col">
            <text style="font-size: large"><b>@_model.PowerSavingThrow(ForceAlignment.Light)</b></text>
        </div>
    </div>
    <div class="row mb-2 align-items-center justify-center">
        <div class="col">
            <text>Universal</text>
        </div>
        <div class="col">
            <text style="font-size: large"><b>@_model.PowerAttackModifier(ForceAlignment.Universal).PrintInt()</b></text>
        </div>
        <div class="col">
            <text style="font-size: large"><b>@_model.PowerSavingThrow(ForceAlignment.Universal)</b></text>
        </div>
    </div>
    <div class="row mb-2 align-items-center justify-center">
        <div class="col">
            <text>Dark</text>
        </div>
        <div class="col">
            <text style="font-size: large"><b>@_model.PowerAttackModifier(ForceAlignment.Dark).PrintInt()</b></text>
        </div>
        <div class="col">
            <text style="font-size: large"><b>@_model.PowerSavingThrow(ForceAlignment.Dark)</b></text>
        </div>
    </div>
    @for (var i = 0; i <= _model.MaxForcePowerLevel; i++)
    {
        <h3 class="mt-3">Level @i</h3>
        <hr class="mt-0" />
        <div class="row mb-2">
            <div class="d-flex flex-wrap">
                @if (_forcePowers != null)
                {
                    @foreach (var power in _forcePowers.Where(x => x.Level == i && _model.ForcePowers.Contains(x)))
                    {
                        <MudButton Variant="Variant.Filled" Color="Color.Info" Class="px-2 py-1 ma-1" OnClick="@(() => ShowInfo(power))" Disabled="@IsDisabled(power)">
                            <MudGrid>
                                <MudItem xs="12" Class="d-flex pb-0">
                                    <MudText Class="pa-0">@power.Name</MudText>
                                </MudItem>
                                <MudItem xs="12" Class="d-flex pt-0">
                                    @if (power.PrerequisiteId != null && power.PrerequisiteId != Guid.Empty)
                                    {
                                        <MudText Class="pa-0" style="font-size: 10px">Pre-Req: @GetPowerName(power.PrerequisiteId)</MudText>
                                    }
                                </MudItem>
                            </MudGrid>
                        </MudButton>
                    }
                }
            </div>
        </div>
    }
}
else
{
    <PageNotFound/>
}

@code
{
    void ShowInfo(ForcePower power)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters {{"Power", power}};
        DialogService.Show<PowerInfoDialog>(power.Name, parameters, options);
    }

    void ShowAbility(Ability ability)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters {{"Text", ability.Description}};
        DialogService.Show<SimpleTextDialog>(ability.Name, parameters, options);
    }

    void ShowRoll()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        DialogService.Show<DiceRollDialog>("Roll", options);
    }

    void ShowWeaponProperty(WeaponProperty prop)
    {
        DialogService.ShowMessageBox(prop.Name, prop.Description);
    }
}