@inject IDialogService DialogService

@if (_loading)
{
    <LightsaberLoad />
}
else
{
    <MudForm Model="@_model" @ref="@_form">
        <MudGrid Class="mb-5">
            <MudItem xs="3">
                <MudTextField @bind-Value="_model.Name" Label="Name" Variant="Variant.Outlined" For="() => _model.Name" Validation="@(_characterValidator.ValidateValue)"/>
            </MudItem>
            <MudItem xs="3">
                <MudTextField @bind-Value="_model.PlayerName" Label="Player" Variant="Variant.Outlined" For="() => _model.PlayerName"/>
            </MudItem>
            <MudItem xs="3">
                <MudSelect T="DMClass" @bind-Value="@_model.Class" Label="Class" Variant="Variant.Outlined" For="() => _model.Class">
                    @foreach (var dmclass in _classes)
                    {
                        <MudSelectItem Value="@dmclass">@dmclass.Name</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="3">
                <MudTextField @bind-Value="_model.Speed" Label="Speed" Variant="Variant.Outlined" For="() => _model.Speed" Validation="@(_characterValidator.ValidateValue)"/>
            </MudItem>
            
            <MudItem xs="4">
                <MudNumericField @bind-Value="_model.Level" Label="Level" Variant="Variant.Outlined" For="() => _model.Level" Validation="@(_characterValidator.ValidateValue)"/>
            </MudItem>
            <MudItem xs="4">
                <MudNumericField @bind-Value="_model.HitPoints" Label="Hit Points" Variant="Variant.Outlined" For="() => _model.HitPoints" Validation="@(_characterValidator.ValidateValue)"/>
            </MudItem>
            <MudItem xs="4">
                <MudNumericField @bind-Value="_model.ArmorClass" Label="Armor Class" Variant="Variant.Outlined" For="() => _model.ArmorClass" Validation="@(_characterValidator.ValidateValue)"/>
            </MudItem>
 
            
            <MudItem xs="2">
                <MudPaper class="d-flex flex-column px-2" Outlined="true">
                    <MudNumericField @bind-Value="_model.Strength" TextChanged="_model.StrengthChanged" Label="Strength" Variant="Variant.Outlined" For="() => _model.Strength" Validation="@(_characterValidator.ValidateValue)"/>
                    <MudNumericField @bind-Value="_model.StrengthBonus" Variant="Variant.Outlined" Label="Bonus" For="() => _model.StrengthBonus" Validation="@(_characterValidator.ValidateValue)"/>
                    <MudCheckBox @bind-Checked="_model.StrengthSave" Label="Save" For="() => _model.StrengthSave" TriState="true" IndeterminateIcon="@Icons.Filled.CheckBox" CheckedIcon="@Icons.Filled.AddBox"/>
                    <MudCheckBox @bind-Checked="_model.Athletics" Label="Athletics" For="() => _model.Athletics" TriState="true" IndeterminateIcon="@Icons.Filled.CheckBox" CheckedIcon="@Icons.Filled.AddBox"/>
                </MudPaper>
            </MudItem>
            <MudItem xs="2">
                <MudPaper class="d-flex flex-column px-2" Outlined="true">
                    <MudNumericField @bind-Value="_model.Dexterity" TextChanged="_model.DexterityChanged" Label="Dexterity" Variant="Variant.Outlined" For="() => _model.Dexterity" Validation="@(_characterValidator.ValidateValue)"/>
                    <MudNumericField @bind-Value="_model.DexterityBonus" Variant="Variant.Outlined" Label="Bonus" For="() => _model.DexterityBonus" Validation="@(_characterValidator.ValidateValue)"/>
                    <MudCheckBox @bind-Checked="_model.DexteritySave" Label="Save" For="() => _model.DexteritySave" TriState="true" IndeterminateIcon="@Icons.Filled.CheckBox" CheckedIcon="@Icons.Filled.AddBox"/>
                    <MudCheckBox @bind-Checked="_model.Acrobatics" Label="Acrobatics" For="() => _model.Acrobatics" TriState="true" IndeterminateIcon="@Icons.Filled.CheckBox" CheckedIcon="@Icons.Filled.AddBox"/>
                    <MudCheckBox @bind-Checked="_model.SleightOfHand" Label="Sleight of Hand" For="() => _model.SleightOfHand" TriState="true" IndeterminateIcon="@Icons.Filled.CheckBox" CheckedIcon="@Icons.Filled.AddBox"/>
                    <MudCheckBox @bind-Checked="_model.Stealth" Label="Stealth" For="() => _model.Stealth" TriState="true" IndeterminateIcon="@Icons.Filled.CheckBox" CheckedIcon="@Icons.Filled.AddBox"/>
                </MudPaper>
            </MudItem>
            <MudItem xs="2">
                <MudPaper class="d-flex flex-column px-2" Outlined="true">
                    <MudNumericField @bind-Value="_model.Constitution" TextChanged="_model.ConstitutionChanged" Label="Constitution" Variant="Variant.Outlined" For="() => _model.Constitution" Validation="@(_characterValidator.ValidateValue)"/>
                    <MudNumericField @bind-Value="_model.ConstitutionBonus" Variant="Variant.Outlined" Label="Bonus" For="() => _model.ConstitutionBonus" Validation="@(_characterValidator.ValidateValue)"/>
                    <MudCheckBox @bind-Checked="_model.ConstitutionSave" Label="Save" For="() => _model.ConstitutionSave" TriState="true" IndeterminateIcon="@Icons.Filled.CheckBox" CheckedIcon="@Icons.Filled.AddBox"/>
                </MudPaper>
            </MudItem>
            <MudItem xs="2">
                <MudPaper class="d-flex flex-column px-2" Outlined="true">
                    <MudNumericField @bind-Value="_model.Intelligence" TextChanged="_model.IntelligenceChanged" Label="Intelligence" Variant="Variant.Outlined" For="() => _model.Intelligence" Validation="@(_characterValidator.ValidateValue)"/>
                    <MudNumericField @bind-Value="_model.IntelligenceBonus" Variant="Variant.Outlined" Label="Bonus" For="() => _model.IntelligenceBonus" Validation="@(_characterValidator.ValidateValue)"/>
                    <MudCheckBox @bind-Checked="_model.IntelligenceSave" Label="Save" For="() => _model.IntelligenceSave" TriState="true" IndeterminateIcon="@Icons.Filled.CheckBox" CheckedIcon="@Icons.Filled.AddBox"/>
                    <MudCheckBox @bind-Checked="_model.Investigation" Label="Investigation" For="() => _model.Investigation" TriState="true" IndeterminateIcon="@Icons.Filled.CheckBox" CheckedIcon="@Icons.Filled.AddBox"/>
                    <MudCheckBox @bind-Checked="_model.Lore" Label="Lore" For="() => _model.Lore" TriState="true" IndeterminateIcon="@Icons.Filled.CheckBox" CheckedIcon="@Icons.Filled.AddBox"/>
                    <MudCheckBox @bind-Checked="_model.Nature" Label="Nature" For="() => _model.Nature" TriState="true" IndeterminateIcon="@Icons.Filled.CheckBox" CheckedIcon="@Icons.Filled.AddBox"/>
                    <MudCheckBox @bind-Checked="_model.Piloting" Label="Piloting" For="() => _model.Piloting" TriState="true" IndeterminateIcon="@Icons.Filled.CheckBox" CheckedIcon="@Icons.Filled.AddBox"/>
                    <MudCheckBox @bind-Checked="_model.Technology" Label="Technology" For="() => _model.Technology" TriState="true" IndeterminateIcon="@Icons.Filled.CheckBox" CheckedIcon="@Icons.Filled.AddBox"/>
                </MudPaper>
            </MudItem>
            <MudItem xs="2">
                <MudPaper class="d-flex flex-column px-2" Outlined="true">
                    <MudNumericField @bind-Value="_model.Wisdom" TextChanged="_model.WisdomChanged" Label="Wisdom" Variant="Variant.Outlined" For="() => _model.Wisdom" Validation="@(_characterValidator.ValidateValue)"/>
                    <MudNumericField @bind-Value="_model.WisdomBonus" Variant="Variant.Outlined" Label="Bonus" For="() => _model.WisdomBonus" Validation="@(_characterValidator.ValidateValue)"/>
                    <MudCheckBox @bind-Checked="_model.WisdomSave" Label="Save" For="() => _model.WisdomSave" TriState="true" IndeterminateIcon="@Icons.Filled.CheckBox" CheckedIcon="@Icons.Filled.AddBox"/>
                    <MudCheckBox @bind-Checked="_model.AnimalHandling" Label="Animal Handling" For="() => _model.AnimalHandling" TriState="true" IndeterminateIcon="@Icons.Filled.CheckBox" CheckedIcon="@Icons.Filled.AddBox"/>
                    <MudCheckBox @bind-Checked="_model.Insight" Label="Insight" For="() => _model.Insight" TriState="true" IndeterminateIcon="@Icons.Filled.CheckBox" CheckedIcon="@Icons.Filled.AddBox"/>
                    <MudCheckBox @bind-Checked="_model.Medicine" Label="Medicine" For="() => _model.Medicine" TriState="true" IndeterminateIcon="@Icons.Filled.CheckBox" CheckedIcon="@Icons.Filled.AddBox"/>
                    <MudCheckBox @bind-Checked="_model.Perception" Label="Perception" For="() => _model.Perception" TriState="true" IndeterminateIcon="@Icons.Filled.CheckBox" CheckedIcon="@Icons.Filled.AddBox"/>
                    <MudCheckBox @bind-Checked="_model.Survival" Label="Survival" For="() => _model.Survival" TriState="true" IndeterminateIcon="@Icons.Filled.CheckBox" CheckedIcon="@Icons.Filled.AddBox"/>
                </MudPaper>
            </MudItem>
            <MudItem xs="2">
                <MudPaper class="d-flex flex-column px-2" Outlined="true">
                    <MudNumericField @bind-Value="_model.Charisma" TextChanged="_model.CharismaChanged" Label="Charisma" Variant="Variant.Outlined" For="() => _model.Charisma" Validation="@(_characterValidator.ValidateValue)"/>
                    <MudNumericField @bind-Value="_model.CharismaBonus" Variant="Variant.Outlined" Label="Bonus" For="() => _model.CharismaBonus" Validation="@(_characterValidator.ValidateValue)"/>
                    <MudCheckBox @bind-Checked="_model.CharismaSave" Label="Save" For="() => _model.CharismaSave" TriState="true" IndeterminateIcon="@Icons.Filled.CheckBox" CheckedIcon="@Icons.Filled.AddBox"/>
                    <MudCheckBox @bind-Checked="_model.Deception" Label="Deception" For="() => _model.Deception" TriState="true" IndeterminateIcon="@Icons.Filled.CheckBox" CheckedIcon="@Icons.Filled.AddBox"/>
                    <MudCheckBox @bind-Checked="_model.Intimidation" Label="Intimidation" For="() => _model.Intimidation" TriState="true" IndeterminateIcon="@Icons.Filled.CheckBox" CheckedIcon="@Icons.Filled.AddBox"/>
                    <MudCheckBox @bind-Checked="_model.Performance" Label="Performance" For="() => _model.Performance" TriState="true" IndeterminateIcon="@Icons.Filled.CheckBox" CheckedIcon="@Icons.Filled.AddBox"/>
                    <MudCheckBox @bind-Checked="_model.Persuasion" Label="Persuasion" For="() => _model.Persuasion" TriState="true" IndeterminateIcon="@Icons.Filled.CheckBox" CheckedIcon="@Icons.Filled.AddBox"/>
                </MudPaper>
            </MudItem>
            
            <MudItem xs="12">
                <MultipleEntityDropdown TEntity="Weapon" @bind-SelectedEntities="_model.Weapons" Label="Weapons"/>
            </MudItem>
            <MudItem xs="12">
                <MultipleEntityDropdown TEntity="Ability" @bind-SelectedEntities="_model.Abilities" Label="Abilities"/>
            </MudItem>
            <MudItem xs="12">
                <MultipleEntityDropdown TEntity="Equipment" @bind-SelectedEntities="_model.Equipments" Label="Equipments"/>
            </MudItem>

            <MudItem xs="4">
                <MudNumericField @bind-Value="_model.ForcePoints" Label="Points" Variant="Variant.Outlined" For="() => _model.ForcePoints" Validation="@(_characterValidator.ValidateValue)"/>
            </MudItem>
            <MudItem xs="4">
                <MudNumericField @bind-Value="_model.MaxForcePowerLevel" Label="Max Level" Variant="Variant.Outlined" For="() => _model.MaxForcePowerLevel" Validation="@(_characterValidator.ValidateValue)"/>
            </MudItem>
            <MudItem xs="4">
                <MudNumericField @bind-Value="_model.TotalForcePowers" Label="Powers Known" Variant="Variant.Outlined" For="() => _model.TotalForcePowers" Validation="@(_characterValidator.ValidateValue)"/>
            </MudItem>
            @for (var i = 0; i <= _model.MaxForcePowerLevel; i++)
            {
                int display = i;
                <MudItem xs="12" Class="pb-0">
                    <MudText Typo="Typo.h4">Level @display</MudText>
                </MudItem>
                <MudItem xs="12">
                    <hr/>
                </MudItem>
                <MudItem xs="12">
                    @foreach (var power in _forcePowers.Where(x => x.Level == i))
                    {
                        <MudButton Variant="Variant.Filled" Color="@ForceColor(power)" Class="px-2 py-1 ma-2" OnClick="@(() => UpdateForcePower(power))" Disabled="@IsDisabled(power)">
                            <MudGrid>
                                <MudItem xs="12" Class="d-flex pb-0 justify-space-between">
                                    <MudText Class="pa-0">@power.Name</MudText>
                                    <MudIconButton Class="pa-0" Icon="@Icons.Material.Filled.Info" Style="@($"color:{Colors.Shades.White}")" OnClick="@(() => ShowInfo(power))"></MudIconButton>
                                </MudItem>
                                <MudItem xs="12" Class="d-flex pt-0">
                                    @if (power.PrerequisiteId != null && power.PrerequisiteId != Guid.Empty)
                                    {
                                        <MudText Class="pa-0" style="font-size: 10px">Pre-Req: @GetPowerName(power.PrerequisiteId)</MudText>
                                    }
                                </MudItem>
                            </MudGrid>
                        </MudButton>
                    }
                </MudItem>
            }
            <MudItem xs="4">
                <MudNumericField @bind-Value="_model.TechPoints" Label="Points" Variant="Variant.Outlined" For="() => _model.TechPoints" Validation="@(_characterValidator.ValidateValue)"/>
            </MudItem>
            <MudItem xs="4">
                <MudNumericField @bind-Value="_model.MaxTechPowerLevel" Label="Max Level" Variant="Variant.Outlined" For="() => _model.MaxTechPowerLevel" Validation="@(_characterValidator.ValidateValue)"/>
            </MudItem>
            <MudItem xs="4">
                <MudNumericField @bind-Value="_model.TotalTechPowers" Label="Powers Known" Variant="Variant.Outlined" For="() => _model.TotalTechPowers" Validation="@(_characterValidator.ValidateValue)"/>
            </MudItem>
            @for (var i = 0; i <= _model.MaxTechPowerLevel; i++)
            {
                int display = i;
                <MudItem xs="12" Class="pb-0">
                    <MudText Typo="Typo.h4">Level @display</MudText>
                </MudItem>
                <MudItem xs="12">
                    <hr/>
                </MudItem>
                @foreach (var power in _techPowers.Where(x => x.Level == i))
                {
                    <MudButton Variant="Variant.Filled" Color="@TechColor(power)" Class="px-2 py-1 ma-2" OnClick="@(() => UpdateTechPower(power))" Disabled="@IsDisabled(power)">
                        <MudGrid>
                            <MudItem xs="12" Class="d-flex justify-space-between">
                                <MudText Class="pt-2">@power.Name</MudText>
                                <MudIconButton Class="pa-2 px-0" Icon="@Icons.Material.Filled.Info" Style="@($"color:{Colors.Shades.White}")" OnClick="@(() => ShowInfo(power))"></MudIconButton>
                            </MudItem>
                        </MudGrid>
                    </MudButton>
                }
            }
            <Submit CancelRef="characters" OnClick="OnSubmit"/>
        </MudGrid>
    </MudForm>
}

@code
{
    void ShowInfo(Power power)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters {{"Power", power}};
        DialogService.Show<PowerInfoDialog>(power.Name, parameters, options);
    }
}