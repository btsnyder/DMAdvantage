@page "/abilities"
@attribute [Authorize]
@inject IApiService ApiService
@inject NavigationManager NavigationManager

@if (_loading)
{
    <LightsaberLoad />
}
else
{
    <MudTable Items="@_abilities" Breakpoint="Breakpoint.Sm" Loading="@_loading" LoadingProgressColor="Color.Info"
        Outlined="true" Dense="true" Striped="true" Filter="new Func<Ability,bool>(SearchAbility)">
        <ToolBarContent>
            <MudText Class="fw-bold" Typo="Typo.h3">Abilities</MudText>
            <MudFab Class="ml-3" StartIcon="@Icons.Filled.Add" Color="Color.Success" OnClick="@(() => NavigationManager.NavigateTo("abilities/add"))"/>
            <MudSpacer />
            <MudTextField @bind-Value="search" Placeholder="Search" Adornment="Adornment.Start" Immediate=true AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"/>
        </ToolBarContent>
        <ColGroup>
            <col />
            <col style="width: 150px;"/>
        </ColGroup>
        <HeaderContent>
            <MudTh Class="mud-theme-tertiary text-white">Name</MudTh>
            <MudTh Class="mud-theme-tertiary text-white"/>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd>
                <div class="d-flex justify-content-end">
                    <MudIconButton Icon="@Icons.Filled.Edit" OnClick="() => EditAbility(context.Id)" Variant="Variant.Filled" Color="Color.Primary" Class="mx-1"/>
                    <MudIconButton Icon="@Icons.Filled.Delete" OnClick="() => RemoveAbility(context)" Variant="Variant.Filled" Color="Color.Error" Class="mx-1"/>
                </div>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager/>
        </PagerContent>
    </MudTable>
}

@code {
    private bool _loading = true; 
    private string search = "";
    private List<Ability>? _abilities;

    protected override async Task OnInitializedAsync()
    {
        await RefreshAbilities();
        await base.OnInitializedAsync();
    }

    private async Task RemoveAbility(Ability ability)
    {
        if (_abilities == null)
            return;
        _abilities.Remove(ability);
        await ApiService.RemoveEntity<Ability>(ability.Id);
    }

    private async Task RefreshAbilities()
    {
        _abilities = await ApiService.GetAllEntities<Ability>();
        _loading = false;   
    }

    private void EditAbility(Guid id)
    {
        NavigationManager.NavigateTo($"abilities/edit/{id}");   
    }

    private bool SearchAbility(Ability ability)
    {
        if (string.IsNullOrWhiteSpace(search))
            return true;
        if (ability.Name.Contains(search, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
}