@inject IDialogService DialogService

<MudItem xs="12">
    @if (ConcentrationPowers.Count > 0)
    {
        <h2 class="px-3">Concentration Powers</h2>
        <MudTable Items="ConcentrationPowers" Breakpoint="Breakpoint.None" Dense="true" Elevation="3">
            <ColGroup>
                <col />
                <col />
                <col />
                <col style="width: 150px;" />
            </ColGroup>
            <HeaderContent>
                <MudTh Class="mud-theme-dark text-white">Player</MudTh>
                <MudTh Class="mud-theme-dark text-white">Power</MudTh>
                <MudTh Class="mud-theme-dark text-white">Duration</MudTh>
                <MudTh Class="mud-theme-dark text-white"/>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Player">@context.Key</MudTd>
                <MudTd DataLabel="Power">@context.Value.Name</MudTd>
                <MudTd DataLabel="Duration">@context.Value.Duration</MudTd>
                <MudTd>
                    <div class="d-flex justify-content-end">
                        <MudIconButton Icon="@Icons.Filled.Info" OnClick="() => ShowInfo(context.Value)" 
                            Variant="Variant.Filled" Color="Color.Info" Class="mx-1" />
                        @if (!FromView)
                        {
                            <MudIconButton Icon="@Icons.Filled.Delete" OnClick="() => ConcentrationPowers.Remove(context.Key)" 
                                Variant="Variant.Filled" Color="Color.Error" Class="mx-1" />
                        }
                    </div>
                </MudTd>
            </RowTemplate>
        </MudTable>
    }
</MudItem>

@code
{
    void ShowInfo(ForcePowerResponse power)
    {
        var options = new MudBlazor.DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters {{"ForcePower", power}};
        DialogService.Show<ForceInfoDialog>(power.Name, parameters, options);
    }
}