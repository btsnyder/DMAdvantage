// <auto-generated />
using System;
using DMAdvantage.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DMAdvantage.Server.Migrations
{
    [DbContext(typeof(DMContext))]
    [Migration("20220428191602_EnemyShips")]
    partial class EnemyShips
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AbilityCharacter", b =>
                {
                    b.Property<Guid>("AbilitiesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CharactersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AbilitiesId", "CharactersId");

                    b.HasIndex("CharactersId");

                    b.ToTable("AbilityCharacter");
                });

            modelBuilder.Entity("BaseActionCreature", b =>
                {
                    b.Property<Guid>("ActionsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreaturesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ActionsId", "CreaturesId");

                    b.HasIndex("CreaturesId");

                    b.ToTable("BaseActionCreature");
                });

            modelBuilder.Entity("CharacterForcePower", b =>
                {
                    b.Property<Guid>("CharactersId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ForcePowersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CharactersId", "ForcePowersId");

                    b.HasIndex("ForcePowersId");

                    b.ToTable("CharacterForcePower");
                });

            modelBuilder.Entity("CharacterWeapon", b =>
                {
                    b.Property<Guid>("CharactersId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WeaponsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CharactersId", "WeaponsId");

                    b.HasIndex("WeaponsId");

                    b.ToTable("CharacterWeapon");
                });

            modelBuilder.Entity("CreatureForcePower", b =>
                {
                    b.Property<Guid>("CreaturesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ForcePowersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CreaturesId", "ForcePowersId");

                    b.HasIndex("ForcePowersId");

                    b.ToTable("CreatureForcePower");
                });

            modelBuilder.Entity("DMAdvantage.Shared.Entities.Ability", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Abilities");
                });

            modelBuilder.Entity("DMAdvantage.Shared.Entities.BaseAction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Damage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DamageType")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Range")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Actions");
                });

            modelBuilder.Entity("DMAdvantage.Shared.Entities.Character", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Acrobatics")
                        .HasColumnType("bit");

                    b.Property<bool?>("AnimalHandling")
                        .HasColumnType("bit");

                    b.Property<int>("ArmorClass")
                        .HasColumnType("int");

                    b.Property<bool?>("Athletics")
                        .HasColumnType("bit");

                    b.Property<int>("Charisma")
                        .HasColumnType("int");

                    b.Property<int>("CharismaBonus")
                        .HasColumnType("int");

                    b.Property<bool?>("CharismaSave")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Constitution")
                        .HasColumnType("int");

                    b.Property<int>("ConstitutionBonus")
                        .HasColumnType("int");

                    b.Property<bool?>("ConstitutionSave")
                        .HasColumnType("bit");

                    b.Property<int>("Credits")
                        .HasColumnType("int");

                    b.Property<bool?>("Deception")
                        .HasColumnType("bit");

                    b.Property<int>("Dexterity")
                        .HasColumnType("int");

                    b.Property<int>("DexterityBonus")
                        .HasColumnType("int");

                    b.Property<bool?>("DexteritySave")
                        .HasColumnType("bit");

                    b.Property<int>("ForcePoints")
                        .HasColumnType("int");

                    b.Property<int>("HitDice")
                        .HasColumnType("int");

                    b.Property<int>("HitPoints")
                        .HasColumnType("int");

                    b.Property<bool?>("Insight")
                        .HasColumnType("bit");

                    b.Property<int>("Intelligence")
                        .HasColumnType("int");

                    b.Property<int>("IntelligenceBonus")
                        .HasColumnType("int");

                    b.Property<bool?>("IntelligenceSave")
                        .HasColumnType("bit");

                    b.Property<bool?>("Intimidation")
                        .HasColumnType("bit");

                    b.Property<bool?>("Investigation")
                        .HasColumnType("bit");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<bool?>("Lore")
                        .HasColumnType("bit");

                    b.Property<int>("MaxForcePowerLevel")
                        .HasColumnType("int");

                    b.Property<bool?>("Medicine")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Nature")
                        .HasColumnType("bit");

                    b.Property<bool?>("Perception")
                        .HasColumnType("bit");

                    b.Property<bool?>("Performance")
                        .HasColumnType("bit");

                    b.Property<bool?>("Persuasion")
                        .HasColumnType("bit");

                    b.Property<bool?>("Piloting")
                        .HasColumnType("bit");

                    b.Property<string>("PlayerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("SleightOfHand")
                        .HasColumnType("bit");

                    b.Property<string>("Speed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Stealth")
                        .HasColumnType("bit");

                    b.Property<int>("Strength")
                        .HasColumnType("int");

                    b.Property<int>("StrengthBonus")
                        .HasColumnType("int");

                    b.Property<bool?>("StrengthSave")
                        .HasColumnType("bit");

                    b.Property<bool?>("Survival")
                        .HasColumnType("bit");

                    b.Property<int>("TechPoints")
                        .HasColumnType("int");

                    b.Property<bool?>("Technology")
                        .HasColumnType("bit");

                    b.Property<int>("TotalForcePowers")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Wisdom")
                        .HasColumnType("int");

                    b.Property<int>("WisdomBonus")
                        .HasColumnType("int");

                    b.Property<bool?>("WisdomSave")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("UserId");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("DMAdvantage.Shared.Entities.Creature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ArmorClass")
                        .HasColumnType("int");

                    b.Property<decimal>("ChallengeRating")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("Charisma")
                        .HasColumnType("int");

                    b.Property<int>("CharismaBonus")
                        .HasColumnType("int");

                    b.Property<int>("Constitution")
                        .HasColumnType("int");

                    b.Property<int>("ConstitutionBonus")
                        .HasColumnType("int");

                    b.Property<int>("Dexterity")
                        .HasColumnType("int");

                    b.Property<int>("DexterityBonus")
                        .HasColumnType("int");

                    b.Property<int>("ForcePoints")
                        .HasColumnType("int");

                    b.Property<int>("HitPoints")
                        .HasColumnType("int");

                    b.Property<string>("Immunities")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Intelligence")
                        .HasColumnType("int");

                    b.Property<int>("IntelligenceBonus")
                        .HasColumnType("int");

                    b.Property<int>("MaxForcePowerLevel")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Resistances")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Speed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Strength")
                        .HasColumnType("int");

                    b.Property<int>("StrengthBonus")
                        .HasColumnType("int");

                    b.Property<int>("TechPoints")
                        .HasColumnType("int");

                    b.Property<int>("TotalForcePowers")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Vulnerabilities")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Wisdom")
                        .HasColumnType("int");

                    b.Property<int>("WisdomBonus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Creatures");
                });

            modelBuilder.Entity("DMAdvantage.Shared.Entities.DMClass", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("HitDice")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("DMClasses");
                });

            modelBuilder.Entity("DMAdvantage.Shared.Entities.Encounter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcentrationCache")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CurrentPlayer")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Encounters");
                });

            modelBuilder.Entity("DMAdvantage.Shared.Entities.ForcePower", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Alignment")
                        .HasColumnType("int");

                    b.Property<string>("CastingDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CastingPeriod")
                        .HasColumnType("int");

                    b.Property<bool>("Concentration")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Duration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HitDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HitOption")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Potency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PrerequisiteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Range")
                        .HasColumnType("int");

                    b.Property<string>("RangeDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ForcePowers");
                });

            modelBuilder.Entity("DMAdvantage.Shared.Entities.InitativeData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CharacterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CurrentFP")
                        .HasColumnType("int");

                    b.Property<int>("CurrentHP")
                        .HasColumnType("int");

                    b.Property<int>("CurrentHitDice")
                        .HasColumnType("int");

                    b.Property<int>("CurrentTP")
                        .HasColumnType("int");

                    b.Property<Guid>("EncounterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Initative")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("CreatureId");

                    b.HasIndex("EncounterId");

                    b.HasIndex("UserId");

                    b.ToTable("InitativeData");
                });

            modelBuilder.Entity("DMAdvantage.Shared.Entities.Ship", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ArmorClass")
                        .HasColumnType("int");

                    b.Property<int>("Charisma")
                        .HasColumnType("int");

                    b.Property<int>("CharismaBonus")
                        .HasColumnType("int");

                    b.Property<int>("Constitution")
                        .HasColumnType("int");

                    b.Property<int>("ConstitutionBonus")
                        .HasColumnType("int");

                    b.Property<int>("Dexterity")
                        .HasColumnType("int");

                    b.Property<int>("DexterityBonus")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HullHitDice")
                        .HasColumnType("int");

                    b.Property<int>("HullHitDiceNumber")
                        .HasColumnType("int");

                    b.Property<int>("HullPoints")
                        .HasColumnType("int");

                    b.Property<int>("Intelligence")
                        .HasColumnType("int");

                    b.Property<int>("IntelligenceBonus")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ShieldHitDice")
                        .HasColumnType("int");

                    b.Property<int>("ShieldHitDiceNumber")
                        .HasColumnType("int");

                    b.Property<int>("ShieldPoints")
                        .HasColumnType("int");

                    b.Property<string>("Speed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Strength")
                        .HasColumnType("int");

                    b.Property<int>("StrengthBonus")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Wisdom")
                        .HasColumnType("int");

                    b.Property<int>("WisdomBonus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Ship");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Ship");
                });

            modelBuilder.Entity("DMAdvantage.Shared.Entities.ShipEncounter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CurrentPlayer")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ShipEncounters");
                });

            modelBuilder.Entity("DMAdvantage.Shared.Entities.ShipInitativeData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CurrentHull")
                        .HasColumnType("int");

                    b.Property<int>("CurrentHullHitDice")
                        .HasColumnType("int");

                    b.Property<int>("CurrentShield")
                        .HasColumnType("int");

                    b.Property<int>("CurrentShieldHitDice")
                        .HasColumnType("int");

                    b.Property<Guid?>("EnemyShipId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Initative")
                        .HasColumnType("int");

                    b.Property<Guid?>("PlayerShipId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ShipEncounterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("EnemyShipId");

                    b.HasIndex("PlayerShipId");

                    b.HasIndex("ShipEncounterId");

                    b.HasIndex("UserId");

                    b.ToTable("ShipInitativeData");
                });

            modelBuilder.Entity("DMAdvantage.Shared.Entities.ShipWeapon", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Damage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DamageType")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ShipWeapons");
                });

            modelBuilder.Entity("DMAdvantage.Shared.Entities.ShipWeaponProperty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Modifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ShipWeaponProperties");
                });

            modelBuilder.Entity("DMAdvantage.Shared.Entities.TechPower", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CastingDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CastingPeriod")
                        .HasColumnType("int");

                    b.Property<Guid?>("CharacterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Concentration")
                        .HasColumnType("bit");

                    b.Property<Guid?>("CreatureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Duration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HitDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HitOption")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Overcharge")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Range")
                        .HasColumnType("int");

                    b.Property<string>("RangeDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("CreatureId");

                    b.HasIndex("UserId");

                    b.ToTable("TechPowers");
                });

            modelBuilder.Entity("DMAdvantage.Shared.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("DMAdvantage.Shared.Entities.Weapon", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Damage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DamageType")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Melee")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatureId");

                    b.HasIndex("UserId");

                    b.ToTable("Weapons");
                });

            modelBuilder.Entity("DMAdvantage.Shared.Entities.WeaponProperty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Modifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("WeaponProperties");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ShipShipWeapon", b =>
                {
                    b.Property<Guid>("ShipsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WeaponsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ShipsId", "WeaponsId");

                    b.HasIndex("WeaponsId");

                    b.ToTable("ShipShipWeapon");
                });

            modelBuilder.Entity("ShipWeaponShipWeaponProperty", b =>
                {
                    b.Property<Guid>("PropertiesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WeaponsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PropertiesId", "WeaponsId");

                    b.HasIndex("WeaponsId");

                    b.ToTable("ShipWeaponShipWeaponProperty");
                });

            modelBuilder.Entity("WeaponWeaponProperty", b =>
                {
                    b.Property<Guid>("PropertiesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WeaponsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PropertiesId", "WeaponsId");

                    b.HasIndex("WeaponsId");

                    b.ToTable("WeaponWeaponProperty");
                });

            modelBuilder.Entity("DMAdvantage.Shared.Entities.EnemyShip", b =>
                {
                    b.HasBaseType("DMAdvantage.Shared.Entities.Ship");

                    b.HasDiscriminator().HasValue("EnemyShip");
                });

            modelBuilder.Entity("DMAdvantage.Shared.Entities.PlayerShip", b =>
                {
                    b.HasBaseType("DMAdvantage.Shared.Entities.Ship");

                    b.Property<bool?>("Astrogation")
                        .HasColumnType("bit");

                    b.Property<bool?>("Boost")
                        .HasColumnType("bit");

                    b.Property<bool?>("CharismaSave")
                        .HasColumnType("bit");

                    b.Property<bool?>("ConstitutionSave")
                        .HasColumnType("bit");

                    b.Property<bool?>("Data")
                        .HasColumnType("bit");

                    b.Property<bool?>("DexteritySave")
                        .HasColumnType("bit");

                    b.Property<bool?>("Hide")
                        .HasColumnType("bit");

                    b.Property<bool?>("Impress")
                        .HasColumnType("bit");

                    b.Property<bool?>("IntelligenceSave")
                        .HasColumnType("bit");

                    b.Property<bool?>("Interfere")
                        .HasColumnType("bit");

                    b.Property<bool?>("Maneuvering")
                        .HasColumnType("bit");

                    b.Property<bool?>("Menace")
                        .HasColumnType("bit");

                    b.Property<bool?>("Patch")
                        .HasColumnType("bit");

                    b.Property<bool?>("Probe")
                        .HasColumnType("bit");

                    b.Property<bool?>("Ram")
                        .HasColumnType("bit");

                    b.Property<bool?>("Regulation")
                        .HasColumnType("bit");

                    b.Property<bool?>("Scan")
                        .HasColumnType("bit");

                    b.Property<bool?>("StrengthSave")
                        .HasColumnType("bit");

                    b.Property<bool?>("Swindle")
                        .HasColumnType("bit");

                    b.Property<bool?>("WisdomSave")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue("PlayerShip");
                });

            modelBuilder.Entity("AbilityCharacter", b =>
                {
                    b.HasOne("DMAdvantage.Shared.Entities.Ability", null)
                        .WithMany()
                        .HasForeignKey("AbilitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DMAdvantage.Shared.Entities.Character", null)
                        .WithMany()
                        .HasForeignKey("CharactersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BaseActionCreature", b =>
                {
                    b.HasOne("DMAdvantage.Shared.Entities.BaseAction", null)
                        .WithMany()
                        .HasForeignKey("ActionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DMAdvantage.Shared.Entities.Creature", null)
                        .WithMany()
                        .HasForeignKey("CreaturesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CharacterForcePower", b =>
                {
                    b.HasOne("DMAdvantage.Shared.Entities.Character", null)
                        .WithMany()
                        .HasForeignKey("CharactersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DMAdvantage.Shared.Entities.ForcePower", null)
                        .WithMany()
                        .HasForeignKey("ForcePowersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CharacterWeapon", b =>
                {
                    b.HasOne("DMAdvantage.Shared.Entities.Character", null)
                        .WithMany()
                        .HasForeignKey("CharactersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DMAdvantage.Shared.Entities.Weapon", null)
                        .WithMany()
                        .HasForeignKey("WeaponsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CreatureForcePower", b =>
                {
                    b.HasOne("DMAdvantage.Shared.Entities.Creature", null)
                        .WithMany()
                        .HasForeignKey("CreaturesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DMAdvantage.Shared.Entities.ForcePower", null)
                        .WithMany()
                        .HasForeignKey("ForcePowersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DMAdvantage.Shared.Entities.Ability", b =>
                {
                    b.HasOne("DMAdvantage.Shared.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DMAdvantage.Shared.Entities.BaseAction", b =>
                {
                    b.HasOne("DMAdvantage.Shared.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DMAdvantage.Shared.Entities.Character", b =>
                {
                    b.HasOne("DMAdvantage.Shared.Entities.DMClass", "Class")
                        .WithMany("Characters")
                        .HasForeignKey("ClassId");

                    b.HasOne("DMAdvantage.Shared.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Class");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DMAdvantage.Shared.Entities.Creature", b =>
                {
                    b.HasOne("DMAdvantage.Shared.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DMAdvantage.Shared.Entities.DMClass", b =>
                {
                    b.HasOne("DMAdvantage.Shared.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DMAdvantage.Shared.Entities.Encounter", b =>
                {
                    b.HasOne("DMAdvantage.Shared.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DMAdvantage.Shared.Entities.ForcePower", b =>
                {
                    b.HasOne("DMAdvantage.Shared.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DMAdvantage.Shared.Entities.InitativeData", b =>
                {
                    b.HasOne("DMAdvantage.Shared.Entities.Character", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterId");

                    b.HasOne("DMAdvantage.Shared.Entities.Creature", "Creature")
                        .WithMany()
                        .HasForeignKey("CreatureId");

                    b.HasOne("DMAdvantage.Shared.Entities.Encounter", "Encounter")
                        .WithMany("InitativeData")
                        .HasForeignKey("EncounterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DMAdvantage.Shared.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Character");

                    b.Navigation("Creature");

                    b.Navigation("Encounter");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DMAdvantage.Shared.Entities.Ship", b =>
                {
                    b.HasOne("DMAdvantage.Shared.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DMAdvantage.Shared.Entities.ShipEncounter", b =>
                {
                    b.HasOne("DMAdvantage.Shared.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DMAdvantage.Shared.Entities.ShipInitativeData", b =>
                {
                    b.HasOne("DMAdvantage.Shared.Entities.EnemyShip", "EnemyShip")
                        .WithMany()
                        .HasForeignKey("EnemyShipId");

                    b.HasOne("DMAdvantage.Shared.Entities.PlayerShip", "PlayerShip")
                        .WithMany()
                        .HasForeignKey("PlayerShipId");

                    b.HasOne("DMAdvantage.Shared.Entities.ShipEncounter", "Encounter")
                        .WithMany("InitativeData")
                        .HasForeignKey("ShipEncounterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DMAdvantage.Shared.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Encounter");

                    b.Navigation("EnemyShip");

                    b.Navigation("PlayerShip");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DMAdvantage.Shared.Entities.ShipWeapon", b =>
                {
                    b.HasOne("DMAdvantage.Shared.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DMAdvantage.Shared.Entities.ShipWeaponProperty", b =>
                {
                    b.HasOne("DMAdvantage.Shared.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DMAdvantage.Shared.Entities.TechPower", b =>
                {
                    b.HasOne("DMAdvantage.Shared.Entities.Character", null)
                        .WithMany("TechPowers")
                        .HasForeignKey("CharacterId");

                    b.HasOne("DMAdvantage.Shared.Entities.Creature", null)
                        .WithMany("TechPowers")
                        .HasForeignKey("CreatureId");

                    b.HasOne("DMAdvantage.Shared.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DMAdvantage.Shared.Entities.Weapon", b =>
                {
                    b.HasOne("DMAdvantage.Shared.Entities.Creature", null)
                        .WithMany("Weapons")
                        .HasForeignKey("CreatureId");

                    b.HasOne("DMAdvantage.Shared.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DMAdvantage.Shared.Entities.WeaponProperty", b =>
                {
                    b.HasOne("DMAdvantage.Shared.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DMAdvantage.Shared.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DMAdvantage.Shared.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DMAdvantage.Shared.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DMAdvantage.Shared.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ShipShipWeapon", b =>
                {
                    b.HasOne("DMAdvantage.Shared.Entities.Ship", null)
                        .WithMany()
                        .HasForeignKey("ShipsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DMAdvantage.Shared.Entities.ShipWeapon", null)
                        .WithMany()
                        .HasForeignKey("WeaponsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ShipWeaponShipWeaponProperty", b =>
                {
                    b.HasOne("DMAdvantage.Shared.Entities.ShipWeaponProperty", null)
                        .WithMany()
                        .HasForeignKey("PropertiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DMAdvantage.Shared.Entities.ShipWeapon", null)
                        .WithMany()
                        .HasForeignKey("WeaponsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WeaponWeaponProperty", b =>
                {
                    b.HasOne("DMAdvantage.Shared.Entities.WeaponProperty", null)
                        .WithMany()
                        .HasForeignKey("PropertiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DMAdvantage.Shared.Entities.Weapon", null)
                        .WithMany()
                        .HasForeignKey("WeaponsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DMAdvantage.Shared.Entities.Character", b =>
                {
                    b.Navigation("TechPowers");
                });

            modelBuilder.Entity("DMAdvantage.Shared.Entities.Creature", b =>
                {
                    b.Navigation("TechPowers");

                    b.Navigation("Weapons");
                });

            modelBuilder.Entity("DMAdvantage.Shared.Entities.DMClass", b =>
                {
                    b.Navigation("Characters");
                });

            modelBuilder.Entity("DMAdvantage.Shared.Entities.Encounter", b =>
                {
                    b.Navigation("InitativeData");
                });

            modelBuilder.Entity("DMAdvantage.Shared.Entities.ShipEncounter", b =>
                {
                    b.Navigation("InitativeData");
                });
#pragma warning restore 612, 618
        }
    }
}
